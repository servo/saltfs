# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.status.results import SUCCESS

from passwords import HTTP_USERNAME, HTTP_PASSWORD, SLAVE_PASSWORD, CHANGE_PASSWORD
from passwords import GITHUB_DOC_TOKEN, GITHUB_STATUS_TOKEN, HOMU_BUILDBOT_SECRET

SERVO_REPO = "https://github.com/servo/servo"
HEAD_SLAVES = ["servo-head"]
LINUX_RESERVED_SLAVES = ["servo-linux1", "servo-linux2"]
MAC_SLAVES = ["servo-mac1", "servo-mac2", "servo-mac3"]
CROSS_SLAVES = ["servo-linux-cross1"]

# These will lock a project to a single platform
MAC_ONLY_PROJECTS = ['servo/io-surface-rs']
LINUX_ONLY_PROJECTS = []
# By default, cargo projects are not build on android. Put them here to add android
ANDROID_PROJECTS = ['mozjs', 'rust-mozjs']

c = BuildmasterConfig = {}
c['protocols'] = {'pb': {'port': 9001}}
c['caches'] = {
    'Changes': 1000,
    'Builds': 100,
    'chdicts': 1000,
}

####### BUILDSLAVES

c['slaves'] = []
for s in MAC_SLAVES + CROSS_SLAVES + HEAD_SLAVES + LINUX_RESERVED_SLAVES:
    c['slaves'].append(buildslave.BuildSlave(s, SLAVE_PASSWORD, max_builds=1))

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.PBChangeSource(passwd=CHANGE_PASSWORD))

####### SCHEDULERS

def servo_auto_try_filter(c):
    if c.project == 'servo/servo' and c.who.startswith('bors-servo') and c.branch in ["auto", "try"]:
        return True
    return False

def servo_master_filter(c):
    if c.project == 'servo/servo' and c.who.startswith('bors-servo') and c.branch == "master":
        return True
    return False

def cargo_linux_filter(c):
    if c.project != 'servo/servo' and c.who.startswith('bors-servo') \
       and c.branch == 'auto' and c.project not in MAC_ONLY_PROJECTS:
        return True
    return False

def cargo_mac_filter(c):
    if c.project != 'servo/servo' and c.who.startswith('bors-servo') \
       and c.branch == 'auto' and c.project not in LINUX_ONLY_PROJECTS:
        return True
    return False

def cargo_android_filter(c):
    if c.project != 'servo/servo' and c.who.startswith('bors-servo') \
       and c.branch == 'auto' and c.project in ANDROID_PROJECTS:
        return True
    return False

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name="servo-auto",
    treeStableTimer=None,
    builderNames=["linux-dev", "linux-rel", "mac-rel-wpt", "mac-dev-unit", "mac-rel-css", "android", "gonk", "arm32", "arm64"],
    change_filter=util.ChangeFilter(filter_fn=servo_auto_try_filter),
))
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="doc-push",
    treeStableTimer=None,
    builderNames=["doc"],
    change_filter=util.ChangeFilter(filter_fn=servo_master_filter),
))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["linux-dev", "linux-rel", "mac-rel-wpt", "mac-dev-unit", "mac-rel-css", "android", "gonk", "arm32", "arm64", "android-nightly"]
))
c['schedulers'].append(schedulers.Nightly(
    name="Nightly",
    branch="master",
    builderNames=["android-nightly"],
    hour=1,
    minute=0
))
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="cargo-linux-auto",
    treeStableTimer=None,
    builderNames=["cargo-linux"],
    change_filter=util.ChangeFilter(filter_fn=cargo_linux_filter)
))
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="cargo-mac-auto",
    treeStableTimer=None,
    builderNames=["cargo-mac"],
    change_filter=util.ChangeFilter(filter_fn=cargo_mac_filter)
))
# TODO:
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#     name="cargo_android_auto",
#     treeStableTimer=None,
#     builderNames=["cargo-android"],
#     change_filter=util.ChangeFilter(filter_fn=cargo_android_filter)
# )]

####### BUILDERS

def create_factory(commands):
    factory = util.BuildFactory()
    for command in commands:
        factory.addStep(command)
    return factory


def create_servo_factory(commands):
    return create_factory([
        steps.Git(repourl=SERVO_REPO, mode="full", method="clobber"),
    ] + commands)


common_test_env = {
    'RUST_BACKTRACE': '1'
}

linux_test_env = dict({
    'DISPLAY': ':0',
    'CARGO_HOME': '/home/servo/.cargo',
    'CCACHE': '/usr/bin/ccache',
    'SERVO_CACHE_DIR': '/home/servo/.servo',
    'SHELL': '/bin/bash'
}, **common_test_env)
linux_headless_env = dict({'SERVO_HEADLESS': '1'}, **linux_test_env)

mac_test_env = dict({
    'CARGO_HOME': '/Users/servo/.cargo',
    'CCACHE': '/usr/local/bin/ccache',
    'SERVO_CACHE_DIR': '/Users/servo/.servo'
}, **common_test_env)

linux_dev_factory = create_servo_factory([
    steps.ShellCommand(command=["./mach", "test-tidy", "--no-progress"], env=linux_headless_env),
    steps.Compile(command=["./mach", "build", "--dev"], env=linux_headless_env),
    steps.ShellCommand(command=["./mach", "test-unit"], env=linux_headless_env),
    steps.Compile(command=["./mach", "build-cef"], env=linux_headless_env),
    steps.Compile(command=["./mach", "build-geckolib"], env=linux_headless_env),
    steps.ShellCommand(command=["bash", "./etc/ci/lockfile_changed.sh"], env=linux_headless_env),
    steps.ShellCommand(command=["bash", "./etc/ci/manifest_changed.sh"], env=linux_headless_env),
])

linux_rel_factory = create_servo_factory([
    steps.Compile(command=["./mach", "build", "--release"], env=linux_headless_env),
    steps.ShellCommand(command=["./mach", "test-wpt-failure"], env=linux_headless_env),
    steps.ShellCommand(command=["./mach", "test-wpt", "--release", "--processes", "24",
                                "--log-raw", "test-wpt.log"],
                       env=linux_headless_env, logfiles={"test-wpt.log": "test-wpt.log"}),
    #steps.ShellCommand(command=["pkill", "-x", "servo"], decodeRC={0: SUCCESS, 1: SUCCESS}),
    steps.ShellCommand(command=["gzip", "test-wpt.log"], env=linux_headless_env),
    steps.ShellCommand(command=["./mach", "test-css", "--release", "--processes", "16",
                                "--log-raw", "test-css.log"],
                       env=linux_headless_env, logfiles={"test-css.log": "test-css.log"}),
    #steps.ShellCommand(command=["pkill", "-x", "servo"], decodeRC={0: SUCCESS, 1: SUCCESS}),
    steps.ShellCommand(command=["gzip", "test-css.log"], env=linux_headless_env),
    steps.Compile(command=["./mach", "build-cef", "--release"], env=linux_headless_env),
    steps.Compile(command=["./mach", "build-geckolib", "--release"], env=linux_headless_env),
    steps.ShellCommand(command=["bash", "./etc/ci/lockfile_changed.sh"], env=linux_headless_env),
    steps.ShellCommand(command=["bash", "./etc/ci/manifest_changed.sh"], env=linux_headless_env),
])

mac_rel_wpt_factory = create_servo_factory([
    steps.ShellCommand(command=["./mach", "test-tidy", "--no-progress"]),
    steps.Compile(command=["./mach", "build", "--release"], env=mac_test_env),
    steps.ShellCommand(command=["./mach", "test-wpt-failure"], env=mac_test_env),
    steps.ShellCommand(command=["./mach", "test-wpt", "--release", "--processes", "4",
                                "--log-raw", "test-wpt.log"],
                       env=mac_test_env, logfiles={"test-wpt.log": "test-wpt.log"}),
    steps.ShellCommand(command=["pkill", "-x", "servo"], decodeRC={0: SUCCESS, 1: SUCCESS}),
    steps.ShellCommand(command=["gzip", "test-wpt.log"], env=mac_test_env),
    steps.ShellCommand(command=["./mach", "build-cef", "--release"], env=mac_test_env),
    steps.ShellCommand(command=["bash", "./etc/ci/lockfile_changed.sh"], env=mac_test_env),
    steps.ShellCommand(command=["bash", "./etc/ci/manifest_changed.sh"], env=mac_test_env),
])

mac_dev_unit_factory = create_servo_factory([
    steps.Compile(command=["./mach", "build", "--dev"], env=mac_test_env),
    steps.ShellCommand(command=["./mach", "test-unit"], env=mac_test_env),
    steps.Compile(command=["./mach", "build-cef"], env=mac_test_env),
    steps.Compile(command=["./mach", "build-geckolib"], env=mac_test_env),
    steps.ShellCommand(command=["bash", "./etc/ci/lockfile_changed.sh"], env=mac_test_env),
    steps.ShellCommand(command=["bash", "./etc/ci/manifest_changed.sh"], env=mac_test_env),
])

mac_rel_css_factory = create_servo_factory([
    steps.Compile(command=["./mach", "build", "--release"], env=mac_test_env),
    steps.ShellCommand(command=["./mach", "test-css", "--release", "--processes", "4",
                                "--log-raw", "test-css.log"],
                       env=mac_test_env, logfiles={"test-css.log": "test-css.log"}),
    steps.ShellCommand(command=["pkill", "-x", "servo"], decodeRC={0: SUCCESS, 1: SUCCESS}),
    steps.ShellCommand(command=["gzip", "test-css.log"], env=mac_test_env),
    steps.ShellCommand(command=["./mach", "build-geckolib", "--release"], env=mac_test_env),
    steps.ShellCommand(command=["bash", "./etc/ci/lockfile_changed.sh"], env=mac_test_env),
    steps.ShellCommand(command=["bash", "./etc/ci/manifest_changed.sh"], env=mac_test_env),
])

android_compile_env = dict({'ANDROID_SDK': '/home/servo/android-sdk-linux/',
                            'ANDROID_NDK': '/home/servo/android-ndk-r10e/',
                            'ANDROID_TOOLCHAIN': '/home/servo/ndk-toolchain/',
                            'PATH': '/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin:/home/servo/android-sdk-linux/platform-tools:/home/servo/ndk-toolchain/bin'},
                           **linux_test_env)
android_factory = create_servo_factory([
    steps.Compile(command=["./mach", "build", "--android", "--dev"], env=android_compile_env),
    steps.ShellCommand(command=["bash", "./etc/ci/lockfile_changed.sh"], env=android_compile_env),
    steps.ShellCommand(command=["bash", "./etc/ci/manifest_changed.sh"], env=android_compile_env),
])

android_nightly_factory = create_servo_factory([
    steps.Compile(command=["./mach", "build", "--android", "--release"], env=android_compile_env),
    steps.Compile(command=["./mach", "package", "-r"], env=android_compile_env),
    steps.ShellCommand(command=["s3cmd", "put",
                                "/home/servo/buildbot/slave/android-nightly/build/target/arm-linux-androideabi/release/servo.apk",
                                "s3://servo-rust/nightly/servo.apk"]),
])

gonk_compile_env = dict({'ANDROID_SDK': '/home/servo/android-sdk-linux/',
                         'ANDROID_NDK': '/home/servo/android-ndk-r10e/',
                         'ANDROID_TOOLCHAIN': '/home/servo/ndk-toolchain/',
                         'GONKDIR': '/home/servo/B2G/',
                         'PATH': '/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin:/home/servo/B2G/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin'},
                        **linux_test_env)

gonk_factory = create_servo_factory([
    steps.Compile(command=["./mach", "build-gonk"], env=gonk_compile_env),
    steps.ShellCommand(command=["bash", "./etc/ci/lockfile_changed.sh"], env=gonk_compile_env),
    steps.ShellCommand(command=["bash", "./etc/ci/manifest_changed.sh"], env=gonk_compile_env),
])

arm32_compile_env = dict({'PATH': '/home/servo/bin:$PATH',
                          'BUILD_TARGET': 'arm-unknown-linux-gnueabihf',
                          'PKG_CONFIG_ALLOW_CROSS': '1',
                          'PKG_CONFIG_PATH': '/usr/lib/arm-linux-gnueabihf/pkgconfig',
                          'EXPAT_NO_PKG_CONFIG': '1',
                          'FREETYPE2_NO_PKG_CONFIG': '1',
                          'FONTCONFIG_NO_PKG_CONFIG': '1'
                          'CC': 'arm-linux-gnueabihf-gcc',
                          'CXX': 'arm-linux-gnueabihf-g++'},
                        **linux_test_env)
arm32_factory = create_servo_factory([
    steps.Compile(command=["./mach", "build", "--rel", "--target=$BUILD_TARGET"], env=arm32_compile_env),
])

arm64_compile_env = dict({'PATH': '/home/servo/bin:$PATH',
                          'BUILD_TARGET': 'aarch64-unknown-linux-gnu',
                          'PKG_CONFIG_ALLOW_CROSS': '1',
                          'PKG_CONFIG_PATH': '/usr/lib/aarch64-linux-gnu/pkgconfig',
                          'EXPAT_NO_PKG_CONFIG': '1',
                          'FREETYPE2_NO_PKG_CONFIG': '1',
                          'FONTCONFIG_NO_PKG_CONFIG': '1'
                          'CC': 'aarch64-linux-gnu-gcc',
                          'CXX': 'aarch64-linux-gnu-g++'},
                        **linux_test_env)
arm64_factory = create_servo_factory([
    steps.Compile(command=["./mach", "build", "--rel", "--target=$BUILD_TARGET"], env=arm64_compile_env),
])

doc_factory = create_servo_factory([
    steps.ShellCommand(command=["etc/ci/upload_docs.sh"],
                       env={'TOKEN': GITHUB_DOC_TOKEN,
                            'CARGO_HOME': '/home/servo/.cargo',
                            'SERVO_CACHE_DIR': '/home/servo/.servo',
                            'SHELL': '/bin/bash'},
                       # important not to leak token
                       logEnviron=False),
])

# Cargo builds
# NOTE: We use this instead of Travis CI for some projects, either for platform reasons or because
# Travis CI can't handle them.
def create_cargo_factory(env, cargo_env):
    cargo_env = dict(env, **cargo_env)

    return create_factory([
        steps.Git(repourl=util.Property('repository'), mode="full", method="clobber"),
        steps.ShellCommand(name="download rustup",
                           command=["curl", "-sL", "https://static.rust-lang.org/rustup.sh",
                                    "-o", "/tmp/rustup.sh"]),
        steps.ShellCommand(name="install rust",
                           command=["sh", "/tmp/rustup.sh", "--prefix=~/.rust", "--channel=nightly",
                                    "-y", "--disable-sudo", "--save"],
                           env=env, want_stderr=False),
        steps.Compile(name="cargo build", description="cargo building", descriptionDone="cargo build",
                      command=["cargo", "build", "--verbose"], env=cargo_env),
        steps.ShellCommand(name="cargo test", description="cargo testing",
                           descriptionDone="cargo test", command=["cargo", "test", "--verbose"],
                           env=cargo_env),
        steps.RemoveDirectory(name="cleanup", dir="~/buildbot/rust"),
    ])


cargo_linux_factory = create_cargo_factory({'SHELL': '/bin/bash'}, {
    'PATH': ['${HOME}/.rust/bin', '${PATH}'],
    'LD_LIBRARY_PATH': '${HOME}/.rust/lib',
})
cargo_mac_factory = create_cargo_factory({'SHELL': '/bin/bash'}, {
    'PATH': ['${HOME}/.rust/bin', '${PATH}'],
    'DYLD_LIBRARY_PATH': '${HOME}/.rust/lib',
})

def branch_priority(builder, requests):
    for r in requests:
        if r.source.branch != "try":
            return r
    return requests[0]

c['builders'] = []
c['builders'].append(util.BuilderConfig(
    name="linux-dev",
    slavenames=LINUX_RESERVED_SLAVES,
    factory=linux_dev_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="linux-rel",
    slavenames=LINUX_RESERVED_SLAVES,
    factory=linux_rel_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="android",
    slavenames=CROSS_SLAVES,
    factory=android_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="gonk",
    slavenames=CROSS_SLAVES,
    factory=gonk_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="arm32",
    slavenames=CROSS_SLAVES,
    factory=arm32_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="arm64",
    slavenames=CROSS_SLAVES,
    factory=arm64_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="mac-rel-wpt",
    slavenames=MAC_SLAVES,
    factory=mac_rel_wpt_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="mac-dev-unit",
    slavenames=MAC_SLAVES,
    factory=mac_dev_unit_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="mac-rel-css",
    slavenames=MAC_SLAVES,
    factory=mac_rel_css_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="doc",
    slavenames=HEAD_SLAVES,
    factory=doc_factory,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="android-nightly",
    slavenames=HEAD_SLAVES,
    factory=android_nightly_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="cargo-linux",
    slavenames=LINUX_RESERVED_SLAVES,
    factory=cargo_linux_factory,
    nextBuild=branch_priority,
    category="cargo_auto"
))
c['builders'].append(util.BuilderConfig(
    name="cargo-mac",
    slavenames=MAC_SLAVES,
    factory=cargo_mac_factory,
    nextBuild=branch_priority,
    category="cargo_auto"
))

####### STATUS TARGETS

from buildbot.status.status_push import HttpStatusPush

c['status'] = []
c['status'].append(HttpStatusPush(
    serverUrl='http://build.servo.org:54856/buildbot',
    extra_post_params={'secret': HOMU_BUILDBOT_SECRET},
))

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    auth=auth.BasicAuth([(HTTP_USERNAME, HTTP_PASSWORD)]),
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.mozilla.org",
                                  port=6697,
                                  useSSL=True,
                                  nick="servo_buildbot",
                                  channels=["#servo-bots"],
                                  notify_events={
                                      'exception':1,
                                      'finished':1,
                                      'success':1,
                                      'failure':1
                                    }))

####### PROJECT IDENTITY

c['title'] = "Servo"
c['titleURL'] = "http://github.com/servo/servo"
c['buildbotURL'] = "http://build.servo.org/"

####### DB URL

c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
