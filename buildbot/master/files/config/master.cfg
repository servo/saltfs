from buildbot.plugins import buildslave, changes, schedulers, util
from buildbot.status import html, status_push, web, words

import environments as envs
import factories
from passwords import HTTP_USERNAME, HTTP_PASSWORD
from passwords import SLAVE_PASSWORD, CHANGE_PASSWORD
from passwords import HOMU_BUILDBOT_SECRET


LINUX_SLAVES = ["servo-linux1", "servo-linux2", "servo-linux3"]
MAC_SLAVES = ["servo-mac1", "servo-mac2", "servo-mac3", "servo-macpro1"]
CROSS_SLAVES = ["servo-linux-cross1", "servo-linux-cross2"]
WINDOWS_SLAVES = ["servo-windows1"]


c = BuildmasterConfig = {}
c['protocols'] = {'pb': {'port': 9001}}
c['caches'] = {
    'Changes': 1000,
    'Builds': 100,
    'chdicts': 1000,
}


##################
# BUILDSLAVES
##################


c['slaves'] = []
for s in MAC_SLAVES + CROSS_SLAVES + LINUX_SLAVES + WINDOWS_SLAVES:
    c['slaves'].append(buildslave.BuildSlave(s, SLAVE_PASSWORD, max_builds=1))


##################
# CHANGESOURCES
##################


c['change_source'] = [changes.PBChangeSource(passwd=CHANGE_PASSWORD)]


##################
# SCHEDULERS
##################


def servo_branch_filter(branch):
    def customized_filter(change):
        return (change.project == 'servo/servo' and
                change.who.startswith('bors-servo') and
                change.branch == branch)

    return util.ChangeFilter(filter_fn=customized_filter)


c['schedulers'] = [
    schedulers.AnyBranchScheduler(
        name="servo-auto",
        treeStableTimer=None,
        builderNames=[  # Run the full set of builds
            "linux-dev",
            "linux-rel",
            "linux-rel-gczeal",
            "mac-rel-wpt",
            "mac-dev-unit",
            "mac-rel-css",
            "android",
            "arm32",
            "arm64",
            "windows",
        ],
        change_filter=servo_branch_filter('auto'),
    ),
    schedulers.AnyBranchScheduler(
        name="servo-try",
        treeStableTimer=None,
        builderNames=[  # Run a reduced set of builds for speed
            "linux-dev",
            "linux-rel",
            "mac-rel-wpt",
            "mac-rel-css",
            "android",
            "arm64",
            "windows",
        ],
        change_filter=servo_branch_filter('try'),
    ),
    schedulers.SingleBranchScheduler(
        name="doc-push",
        treeStableTimer=None,
        builderNames=["doc"],
        change_filter=servo_branch_filter('master'),
    ),
    schedulers.ForceScheduler(
        name="force",
        builderNames=[
            "linux-dev",
            "linux-rel",
            "linux-rel-gczeal",
            "mac-rel-wpt",
            "mac-dev-unit",
            "mac-rel-css",
            "android",
            "arm32",
            "arm64",
            "android-nightly",
            "windows",
        ],
    ),
    schedulers.Nightly(
        name="Nightly",
        branch="master",
        builderNames=["android-nightly"],
        hour=1,
        minute=0,
    ),
]


##################
# BUILDERS
##################


def branch_priority(builder, requests):
    for r in requests:
        if r.source.branch != "try":
            return r
    return requests[0]


class DynamicServoBuilder(util.BuilderConfig):
    """
    Builder which uses DynamicServoFactory to run steps from a yaml file.
    """
    def __init__(self, name, slavenames, environment):
        # util.BuilderConfig is an old-style class so we cannot use super()
        # but must hardcode the superclass here
        util.BuilderConfig.__init__(
            self,
            name=name,
            slavenames=slavenames,
            factory=factories.DynamicServoFactory(name, environment),
            nextBuild=branch_priority,
            category="auto",
        )


c['builders'] = [
    DynamicServoBuilder("linux-dev", LINUX_SLAVES, envs.build_linux),
    DynamicServoBuilder("linux-rel", LINUX_SLAVES, envs.build_linux),
    DynamicServoBuilder("linux-rel-gczeal", LINUX_SLAVES, envs.build_linux),
    DynamicServoBuilder("android", CROSS_SLAVES, envs.build_android),
    DynamicServoBuilder("arm32", CROSS_SLAVES, envs.build_arm32),
    DynamicServoBuilder("arm64", CROSS_SLAVES, envs.build_arm64),
    DynamicServoBuilder("mac-dev-unit", MAC_SLAVES, envs.build_mac),
    DynamicServoBuilder("mac-rel-wpt", MAC_SLAVES, envs.build_mac),
    DynamicServoBuilder("mac-rel-css", MAC_SLAVES, envs.build_mac),
    DynamicServoBuilder("android-nightly", CROSS_SLAVES, envs.build_android),
    # The below builders are not dynamic but rather have hard-coded factories
    util.BuilderConfig(
        name="windows",
        slavenames=WINDOWS_SLAVES,
        factory=factories.windows,
        nextBuild=branch_priority,
        category="auto",
    ),
    util.BuilderConfig(
        name="doc",
        slavenames=LINUX_SLAVES,
        factory=factories.doc,
        category="auto",
    ),
]


##################
# STATUS TARGETS
##################


c['status'] = []
c['status'].append(status_push.HttpStatusPush(
    serverUrl='http://build.servo.org:54856/buildbot',
    extra_post_params={'secret': HOMU_BUILDBOT_SECRET},
))

authz_cfg = web.authz.Authz(
    auth=web.auth.BasicAuth([(HTTP_USERNAME, HTTP_PASSWORD)]),
    gracefulShutdown='auth',
    forceBuild='auth',
    forceAllBuilds='auth',
    pingBuilder='auth',
    stopBuild='auth',
    stopAllBuilds='auth',
    cancelPendingBuild='auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

c['status'].append(words.IRC(host="irc.mozilla.org",
                             port=6697,
                             useSSL=True,
                             nick="servo_buildbot",
                             channels=["#servo-bots"],
                             notify_events={
                                 'exception': 1,
                                 'finished': 1,
                                 'success': 1,
                                 'failure': 1,
                             }))


##################
# PROJECT IDENTITY
##################


c['title'] = "Servo"
c['titleURL'] = "http://github.com/servo/servo"
c['buildbotURL'] = "http://build.servo.org/"


##################
# DATABASE URL
##################


c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
