# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

import factories
from passwords import HTTP_USERNAME, HTTP_PASSWORD, SLAVE_PASSWORD, CHANGE_PASSWORD
from passwords import GITHUB_STATUS_TOKEN, HOMU_BUILDBOT_SECRET

LINUX_RESERVED_SLAVES = ["servo-linux1", "servo-linux2"]
MAC_SLAVES = ["servo-mac1", "servo-mac2", "servo-mac3"]
CROSS_SLAVES = ["servo-linux-cross1", "servo-linux-cross2"]
WINDOWS_SLAVES = ["servo-windows1"]

c = BuildmasterConfig = {}
c['protocols'] = {'pb': {'port': 9001}}
c['caches'] = {
    'Changes': 1000,
    'Builds': 100,
    'chdicts': 1000,
}

####### BUILDSLAVES

c['slaves'] = []
for s in MAC_SLAVES + CROSS_SLAVES + LINUX_RESERVED_SLAVES + WINDOWS_SLAVES:
    c['slaves'].append(buildslave.BuildSlave(s, SLAVE_PASSWORD, max_builds=1))

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.PBChangeSource(passwd=CHANGE_PASSWORD))

####### SCHEDULERS

def servo_auto_try_filter(c):
    if c.project == 'servo/servo' and c.who.startswith('bors-servo') and c.branch in ["auto", "try"]:
        return True
    return False

def servo_master_filter(c):
    if c.project == 'servo/servo' and c.who.startswith('bors-servo') and c.branch == "master":
        return True
    return False

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name="servo-auto",
    treeStableTimer=None,
    builderNames=["linux-dev", "linux-rel", "mac-rel-wpt", "mac-dev-unit", "mac-rel-css", "android", "arm32", "arm64", "windows"],
    change_filter=util.ChangeFilter(filter_fn=servo_auto_try_filter),
))
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="doc-push",
    treeStableTimer=None,
    builderNames=["doc"],
    change_filter=util.ChangeFilter(filter_fn=servo_master_filter),
))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["linux-dev", "linux-rel", "mac-rel-wpt", "mac-dev-unit", "mac-rel-css", "android", "arm32", "arm64", "android-nightly", "windows"]
))
c['schedulers'].append(schedulers.Nightly(
    name="Nightly",
    branch="master",
    builderNames=["android-nightly"],
    hour=1,
    minute=0
))

####### BUILDERS

def branch_priority(builder, requests):
    for r in requests:
        if r.source.branch != "try":
            return r
    return requests[0]

c['builders'] = []
c['builders'].append(util.BuilderConfig(
    name="linux-dev",
    slavenames=LINUX_RESERVED_SLAVES,
    factory=factories.linux_dev,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="linux-rel",
    slavenames=LINUX_RESERVED_SLAVES,
    factory=factories.linux_rel,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="android",
    slavenames=CROSS_SLAVES,
    factory=factories.android,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="arm32",
    slavenames=CROSS_SLAVES,
    factory=factories.arm32,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="arm64",
    slavenames=CROSS_SLAVES,
    factory=factories.arm64,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="mac-rel-wpt",
    slavenames=MAC_SLAVES,
    factory=factories.mac_rel_wpt,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="mac-dev-unit",
    slavenames=MAC_SLAVES,
    factory=factories.mac_dev_unit,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="mac-rel-css",
    slavenames=MAC_SLAVES,
    factory=factories.mac_rel_css,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="windows",
    slavenames=WINDOWS_SLAVES,
    factory=factories.windows,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="doc",
    slavenames=LINUX_RESERVED_SLAVES,
    factory=factories.doc,
    category="auto",
))
c['builders'].append(util.BuilderConfig(
    name="android-nightly",
    slavenames=CROSS_SLAVES,
    factory=factories.android_nightly,
    nextBuild=branch_priority,
    category="auto",
))

####### STATUS TARGETS

from buildbot.status.status_push import HttpStatusPush

c['status'] = []
c['status'].append(HttpStatusPush(
    serverUrl='http://build.servo.org:54856/buildbot',
    extra_post_params={'secret': HOMU_BUILDBOT_SECRET},
))

from buildbot.status import html
from buildbot.status.web import authz, auth



authz_cfg=authz.Authz(
    auth=auth.BasicAuth([(HTTP_USERNAME, HTTP_PASSWORD)]),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.mozilla.org",
                                  port=6697,
                                  useSSL=True,
                                  nick="servo_buildbot",
                                  channels=["#servo-bots"],
                                  notify_events={
                                      'exception':1,
                                      'finished':1,
                                      'success':1,
                                      'failure':1
                                    }))

####### PROJECT IDENTITY

c['title'] = "Servo"
c['titleURL'] = "http://github.com/servo/servo"
c['buildbotURL'] = "http://build.servo.org/"

####### DB URL

c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
